#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import click
from rpt_dosi import images as im
from rpt_dosi import dosimetry as dosi
from rpt_dosi import opendose as od
import SimpleITK as itk
import numpy as np

CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])


@click.command(context_settings=CONTEXT_SETTINGS)
@click.option(
    "--input_image",
    "-i",
    required=True,
    type=click.Path(exists=True),
    help="Input SPECT image",
)
@click.option("--output", "-o", required=True, help="Output txt filename")
@click.option("--roi", "-r", required=True, multiple=True, help="ROI filenames")
@click.option("--acq_time", "-t", type=float, required=True, help="Time in h")
@click.option(
    "--phantom", "-p", default="ICRP 110 AM", help="Phantom ICRP 110 AF or AM"
)
def go(input_image, roi, acq_time, phantom, output):
    # read image
    img = itk.ReadImage(input_image)

    # time in sec
    time_sec = acq_time * 3600

    # MIRD phantom
    ph_id, phantom = od.guess_phantom_id(phantom)
    print(f"Phantom id: {ph_id} = {phantom}")

    # loop on ROI
    for roi_file in roi:
        # read roi mask and resample if needed
        r = itk.ReadImage(roi_file)
        if not im.images_have_same_domain(img, r):
            r = im.resample_image_like(r, img, 0, linear=False)

        # retrieve Svalue from the roi name
        svalue, s_mass = od.get_svalue_and_mass(phantom, roi_file, "Lu177", roi_file)
        exit()

        # compute mass of the current ROI
        roi_mass = im.compute_roi_mass()

        # dose computation with Hanscheid method
        roia = itk.GetArrayFromImage(r)
        # dose = dosi.dose_hanscheid17(imga, roia, time_sec, mass, Svalue)
        dose = dosi.dose_hanscheid2018(imga, roia, time_sec, pixel_volume_ml)
        print(f"Dose for {roi_file}: {dose:.2f} Gray")


# --------------------------------------------------------------------------
if __name__ == "__main__":
    go()
